
services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram_bot_app
    env_file:
      - .env
    environment:
      # Override specific settings for containerized environment
      DB_HOST: db
      REDIS_HOST: redis
      WEB_HOST: 0.0.0.0
      WEB_PORT: 8081
    ports:
      - "${WEB_PORT:-8080}:8081"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      # Optional: Mount logs directory for persistence
      - ./logs:/app/logs
    networks:
      - telegram_bot_network

  db:
    image: postgres:15-alpine
    container_name: telegram_bot_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: Add custom initialization scripts
      # - ./db/init:/docker-entrypoint-initdb.d
    ports:
      # Remove this in production for security
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - telegram_bot_network

  redis:
    image: redis:7-alpine
    container_name: telegram_bot_redis
    env_file:
      - .env
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server
      fi
      "
    volumes:
      - redis_data:/data
      # Optional: Custom Redis configuration
      # - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      # Remove this in production for security
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - telegram_bot_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  telegram_bot_network:
    driver: bridge
